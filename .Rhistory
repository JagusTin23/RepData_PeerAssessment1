needforC
needforC/325
needforC <- 820-current
needforC/325
assign <- c(25,30,24,30,30,16,13,15,31,35,34,33,30,35)
assign
sum(assign)
current <- 416 + 193
current
needforC <- 650-current
needforC
needforC/325
needforC/325*100
needforC <- 820-current
needforC/325*100
needforC <- 920-current
needforC/325*100
assign <- c(25,30,24,30,30,16,13,15,31,35,35,34,33,30,35)
sum(assign)
needforC <- 920-current
needforC/325*100
current <- assign + 193
current
needforC <- 920-current
needforC/325*100
current <- sum(assign) + 193
current
needforC <- 920-current
needforC/325*100
needforC <- 820-current
needforC/325*100
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
install.packages("httr")
library("httr")
library("RMySQL")
install.packages("sqldf")
library("sqldf")
R.version.string
library(swirl)
switl()
swirl()
menu
quit
help.start()
bye
Library(cwirl)
Library(swirl)
library(swirl)
swirl()
swirl()
data(cara)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x= car$speed, y = car$dist)
plot(x= cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(cars)
plot(x= cars$speed, y = cars$dist, xlab = "Speed")
plot(x= cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x= cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab ="Speed")
plot(cars, main="My Plot")
?plot
plot(cars, sub="My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim=c(10, 15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(pat2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cars, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cars, -(X:size))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500 & r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux_gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size/mb/2^10)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size-1000)
mutate(cran3, correct_size = size+1000)
summarize(cran, sum_down = sum(downloands))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_count
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(counts))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, unique)
arrange(top_unique, desc(unique))
arrange(top_unique_sorted, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
cran %>%
select(ip_id, country, package, size) %>%
print
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(stundets2, sex_class, count)
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
?gather
submit()
submit()
?spread
submit()
extract_numeric("class5")
?mutate
?mutate
?mutate
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
?contains
?select
submit()
?group_by
submit()
submit()
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- totay()
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment, hm(now()))
this_moment <- update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes= 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(swirl)
install.packages("lattice")
library(ggplot2)
install.packages("ggplot2")
library("ggplot2")
version
library(ggplot2)
data(mpg)
qplot((displ, hwy, data = mpg))
qplot(displ, hwy, data = mpg)
library(datasets)
?datasets
library(help = "datasets")
hist(airquality$Ozone)
hist(airquality$Ozone, breaks = 20)
with(airquality, plot(Wind, Ozone))
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")
colors()
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in NYC"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in NYC", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch=2, col= c("blue", "red"), legend = c("May", "Other Months"))
legend("topright", pch=1, col= c("blue", "red"), legend = c("May", "Other Months"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in NYC", pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1,2))
with(airquality, { })
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
bitmap()
?bitmap
?quarts
?quartz
?bitmap
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN" | country == "US")
filter(cran, country == "IN" | country == "US")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- group_by(cran, packages)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View()
View(top_count)
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?swirl
?play
submit()
View(result3)
submit()
submit()
submit()
submit()
play()
cran
by_country <- cran %>% select(country, ip_id, size, package)
by_country
by_country <-
cran %>%
select(country, ip_id, size, package) %>%
group_by(country)
by_country
by_country <-
cran %>%
select(country, ip_id, size, package) %>%
group_by(country) %>%
summarize(count = n(), unique = n_distinct(ip_id))
by_country
by_country <-
cran %>%
select(country, ip_id, size, package) %>%
group_by(country) %>%
summarize(count = n(), unique = n_distinct(ip_id)) %>%
arrange(desc(count))
by_country
by_country <-
cran %>%
select(country, ip_id, size, package) %>%
group_by(country) %>%
summarize(count = n(), unique = n_distinct(ip_id)) %>%
arrange(desc(unique))
by_country
nxt()
library("swril")
library("swirl")
swirl()
names(ssd[, 562:563])
?
table
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1)
names(sub1[1:12])
myedit(showXY.R)
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd$v[,2])
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12], maxCon))
dim(maxCon)
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562:563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562:563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust)
dim(kClust$centers)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size == 49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
swirl()
bye()
swirl()
bye()
swirl()
library(swirl)
swirl()
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
0.916
(2+1)/36 - 1
1 - (2+1)/36
deck
52
4/52
0
12/52
0
2/51
.5*1.6*.8
0.64
mypdf
?integrate
integrate(mypdf, 0, 1.6)
0.5
?sqrt
sqrt(2)
bye()
x <- 2:5
p <- c(.1, .2, .3, .4)
rbind(x,p)
sum(x^2 * p) - sum(x * p)^2
x <- c(-0.5, 0, 1, 1, 1.5)
y <- c(0, 0, 2, 0, 0)
plot(x, y, lwd = 3, frame = FALSE, type = "l")
pbeta(0.75, 2,1)
qbeta(0.99, 2,1)
qbeta(0.91, 2,1)
qbeta(0.90, 2,1)
qbeta(0.85, 2,1)
qbeta(1, 2,1)
qbeta(0.9999, 2,1)
qbeta(0.75, 2,1)
qbeta(50, 2,1)
qbeta(.1, 2,1)
0.17-.12+06
0.17-.12+0.6
?qunif
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
x*p
sum(x*p)
qunif(0.75, 0, 1)
qunif(0.75, 0, 2)
.75*.3/(.75*.3+(1-.52)*.7)
.17-.12-.06
.17-.12+.06
setwd("./desktop/rcoursera")
list.files()
setwd("./ReproRes"
)
list.files()
setwd(".RepData_PeerAssessment1")
setwd("./RepData_PeerAssessment1")
list.files()
